// source: nimar.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.Agari', null, global);
goog.exportSymbol('proto.CreateRoomRequest', null, global);
goog.exportSymbol('proto.GameTable', null, global);
goog.exportSymbol('proto.JoinRoomRequest', null, global);
goog.exportSymbol('proto.Kaze', null, global);
goog.exportSymbol('proto.Message', null, global);
goog.exportSymbol('proto.MessageType', null, global);
goog.exportSymbol('proto.OpenType', null, global);
goog.exportSymbol('proto.OpenedTiles', null, global);
goog.exportSymbol('proto.Operator', null, global);
goog.exportSymbol('proto.OperatorType', null, global);
goog.exportSymbol('proto.Operators', null, global);
goog.exportSymbol('proto.Player', null, global);
goog.exportSymbol('proto.PlayerID', null, global);
goog.exportSymbol('proto.Point', null, global);
goog.exportSymbol('proto.Room', null, global);
goog.exportSymbol('proto.Rooms', null, global);
goog.exportSymbol('proto.Suit', null, global);
goog.exportSymbol('proto.TableStatus', null, global);
goog.exportSymbol('proto.Tile', null, global);
goog.exportSymbol('proto.Tiles', null, global);
goog.exportSymbol('proto.Tsumo', null, global);
goog.exportSymbol('proto.Yaku', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Yaku = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Yaku, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Yaku.displayName = 'proto.Yaku';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Point.repeatedFields_, null);
};
goog.inherits(proto.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Point.displayName = 'proto.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Agari = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Agari, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Agari.displayName = 'proto.Agari';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message.displayName = 'proto.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CreateRoomRequest.displayName = 'proto.CreateRoomRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Room = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Room.repeatedFields_, null);
};
goog.inherits(proto.Room, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Room.displayName = 'proto.Room';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Rooms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Rooms.repeatedFields_, null);
};
goog.inherits(proto.Rooms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Rooms.displayName = 'proto.Rooms';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JoinRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JoinRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JoinRoomRequest.displayName = 'proto.JoinRoomRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TableStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TableStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TableStatus.displayName = 'proto.TableStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameTable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GameTable.displayName = 'proto.GameTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tsumo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tsumo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tsumo.displayName = 'proto.Tsumo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tiles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Tiles.repeatedFields_, null);
};
goog.inherits(proto.Tiles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tiles.displayName = 'proto.Tiles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Tile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Tile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Tile.displayName = 'proto.Tile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Player.displayName = 'proto.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OpenedTiles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OpenedTiles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OpenedTiles.displayName = 'proto.OpenedTiles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerID.displayName = 'proto.PlayerID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Operators = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Operators.repeatedFields_, null);
};
goog.inherits(proto.Operators, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Operators.displayName = 'proto.Operators';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Operator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Operator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Operator.displayName = 'proto.Operator';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Yaku.prototype.toObject = function(opt_includeInstance) {
  return proto.Yaku.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Yaku} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Yaku.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    han: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Yaku}
 */
proto.Yaku.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Yaku;
  return proto.Yaku.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Yaku} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Yaku}
 */
proto.Yaku.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Yaku.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Yaku.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Yaku} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Yaku.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHan();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Yaku.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Yaku} returns this
 */
proto.Yaku.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 han = 2;
 * @return {number}
 */
proto.Yaku.prototype.getHan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Yaku} returns this
 */
proto.Yaku.prototype.setHan = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Point.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalhu: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalhan: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalpoint: jspb.Message.getFieldWithDefault(msg, 3, 0),
    matchyakusList: jspb.Message.toObjectList(msg.getMatchyakusList(),
    proto.Yaku.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Point}
 */
proto.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Point;
  return proto.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Point}
 */
proto.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalhu(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalhan(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalpoint(value);
      break;
    case 4:
      var value = new proto.Yaku;
      reader.readMessage(value,proto.Yaku.deserializeBinaryFromReader);
      msg.addMatchyakus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalhu();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotalhan();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTotalpoint();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMatchyakusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Yaku.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 totalHu = 1;
 * @return {number}
 */
proto.Point.prototype.getTotalhu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Point} returns this
 */
proto.Point.prototype.setTotalhu = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 totalHan = 2;
 * @return {number}
 */
proto.Point.prototype.getTotalhan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Point} returns this
 */
proto.Point.prototype.setTotalhan = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 totalPoint = 3;
 * @return {number}
 */
proto.Point.prototype.getTotalpoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Point} returns this
 */
proto.Point.prototype.setTotalpoint = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Yaku matchYakus = 4;
 * @return {!Array<!proto.Yaku>}
 */
proto.Point.prototype.getMatchyakusList = function() {
  return /** @type{!Array<!proto.Yaku>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Yaku, 4));
};


/**
 * @param {!Array<!proto.Yaku>} value
 * @return {!proto.Point} returns this
*/
proto.Point.prototype.setMatchyakusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Yaku=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Yaku}
 */
proto.Point.prototype.addMatchyakus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Yaku, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Point} returns this
 */
proto.Point.prototype.clearMatchyakusList = function() {
  return this.setMatchyakusList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Agari.prototype.toObject = function(opt_includeInstance) {
  return proto.Agari.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Agari} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Agari.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hand: (f = msg.getHand()) && proto.Tiles.toObject(includeInstance, f),
    tsumoritile: (f = msg.getTsumoritile()) && proto.Tile.toObject(includeInstance, f),
    rontile: (f = msg.getRontile()) && proto.Tile.toObject(includeInstance, f),
    openedtile1: (f = msg.getOpenedtile1()) && proto.OpenedTiles.toObject(includeInstance, f),
    openedtile2: (f = msg.getOpenedtile2()) && proto.OpenedTiles.toObject(includeInstance, f),
    openedtile3: (f = msg.getOpenedtile3()) && proto.OpenedTiles.toObject(includeInstance, f),
    openedtile4: (f = msg.getOpenedtile4()) && proto.OpenedTiles.toObject(includeInstance, f),
    pe: (f = msg.getPe()) && proto.OpenedTiles.toObject(includeInstance, f),
    point: (f = msg.getPoint()) && proto.Point.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Agari}
 */
proto.Agari.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Agari;
  return proto.Agari.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Agari} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Agari}
 */
proto.Agari.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.Tiles;
      reader.readMessage(value,proto.Tiles.deserializeBinaryFromReader);
      msg.setHand(value);
      break;
    case 4:
      var value = new proto.Tile;
      reader.readMessage(value,proto.Tile.deserializeBinaryFromReader);
      msg.setTsumoritile(value);
      break;
    case 5:
      var value = new proto.Tile;
      reader.readMessage(value,proto.Tile.deserializeBinaryFromReader);
      msg.setRontile(value);
      break;
    case 6:
      var value = new proto.OpenedTiles;
      reader.readMessage(value,proto.OpenedTiles.deserializeBinaryFromReader);
      msg.setOpenedtile1(value);
      break;
    case 7:
      var value = new proto.OpenedTiles;
      reader.readMessage(value,proto.OpenedTiles.deserializeBinaryFromReader);
      msg.setOpenedtile2(value);
      break;
    case 8:
      var value = new proto.OpenedTiles;
      reader.readMessage(value,proto.OpenedTiles.deserializeBinaryFromReader);
      msg.setOpenedtile3(value);
      break;
    case 9:
      var value = new proto.OpenedTiles;
      reader.readMessage(value,proto.OpenedTiles.deserializeBinaryFromReader);
      msg.setOpenedtile4(value);
      break;
    case 10:
      var value = new proto.OpenedTiles;
      reader.readMessage(value,proto.OpenedTiles.deserializeBinaryFromReader);
      msg.setPe(value);
      break;
    case 11:
      var value = new proto.Point;
      reader.readMessage(value,proto.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Agari.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Agari.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Agari} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Agari.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Tiles.serializeBinaryToWriter
    );
  }
  f = message.getTsumoritile();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Tile.serializeBinaryToWriter
    );
  }
  f = message.getRontile();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Tile.serializeBinaryToWriter
    );
  }
  f = message.getOpenedtile1();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.OpenedTiles.serializeBinaryToWriter
    );
  }
  f = message.getOpenedtile2();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.OpenedTiles.serializeBinaryToWriter
    );
  }
  f = message.getOpenedtile3();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.OpenedTiles.serializeBinaryToWriter
    );
  }
  f = message.getOpenedtile4();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.OpenedTiles.serializeBinaryToWriter
    );
  }
  f = message.getPe();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.OpenedTiles.serializeBinaryToWriter
    );
  }
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Agari.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Agari.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Tiles hand = 3;
 * @return {?proto.Tiles}
 */
proto.Agari.prototype.getHand = function() {
  return /** @type{?proto.Tiles} */ (
    jspb.Message.getWrapperField(this, proto.Tiles, 3));
};


/**
 * @param {?proto.Tiles|undefined} value
 * @return {!proto.Agari} returns this
*/
proto.Agari.prototype.setHand = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.clearHand = function() {
  return this.setHand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Agari.prototype.hasHand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Tile tsumoriTile = 4;
 * @return {?proto.Tile}
 */
proto.Agari.prototype.getTsumoritile = function() {
  return /** @type{?proto.Tile} */ (
    jspb.Message.getWrapperField(this, proto.Tile, 4));
};


/**
 * @param {?proto.Tile|undefined} value
 * @return {!proto.Agari} returns this
*/
proto.Agari.prototype.setTsumoritile = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.clearTsumoritile = function() {
  return this.setTsumoritile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Agari.prototype.hasTsumoritile = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Tile ronTile = 5;
 * @return {?proto.Tile}
 */
proto.Agari.prototype.getRontile = function() {
  return /** @type{?proto.Tile} */ (
    jspb.Message.getWrapperField(this, proto.Tile, 5));
};


/**
 * @param {?proto.Tile|undefined} value
 * @return {!proto.Agari} returns this
*/
proto.Agari.prototype.setRontile = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.clearRontile = function() {
  return this.setRontile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Agari.prototype.hasRontile = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OpenedTiles openedTile1 = 6;
 * @return {?proto.OpenedTiles}
 */
proto.Agari.prototype.getOpenedtile1 = function() {
  return /** @type{?proto.OpenedTiles} */ (
    jspb.Message.getWrapperField(this, proto.OpenedTiles, 6));
};


/**
 * @param {?proto.OpenedTiles|undefined} value
 * @return {!proto.Agari} returns this
*/
proto.Agari.prototype.setOpenedtile1 = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.clearOpenedtile1 = function() {
  return this.setOpenedtile1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Agari.prototype.hasOpenedtile1 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OpenedTiles openedTile2 = 7;
 * @return {?proto.OpenedTiles}
 */
proto.Agari.prototype.getOpenedtile2 = function() {
  return /** @type{?proto.OpenedTiles} */ (
    jspb.Message.getWrapperField(this, proto.OpenedTiles, 7));
};


/**
 * @param {?proto.OpenedTiles|undefined} value
 * @return {!proto.Agari} returns this
*/
proto.Agari.prototype.setOpenedtile2 = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.clearOpenedtile2 = function() {
  return this.setOpenedtile2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Agari.prototype.hasOpenedtile2 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OpenedTiles openedTile3 = 8;
 * @return {?proto.OpenedTiles}
 */
proto.Agari.prototype.getOpenedtile3 = function() {
  return /** @type{?proto.OpenedTiles} */ (
    jspb.Message.getWrapperField(this, proto.OpenedTiles, 8));
};


/**
 * @param {?proto.OpenedTiles|undefined} value
 * @return {!proto.Agari} returns this
*/
proto.Agari.prototype.setOpenedtile3 = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.clearOpenedtile3 = function() {
  return this.setOpenedtile3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Agari.prototype.hasOpenedtile3 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OpenedTiles openedTile4 = 9;
 * @return {?proto.OpenedTiles}
 */
proto.Agari.prototype.getOpenedtile4 = function() {
  return /** @type{?proto.OpenedTiles} */ (
    jspb.Message.getWrapperField(this, proto.OpenedTiles, 9));
};


/**
 * @param {?proto.OpenedTiles|undefined} value
 * @return {!proto.Agari} returns this
*/
proto.Agari.prototype.setOpenedtile4 = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.clearOpenedtile4 = function() {
  return this.setOpenedtile4(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Agari.prototype.hasOpenedtile4 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OpenedTiles pe = 10;
 * @return {?proto.OpenedTiles}
 */
proto.Agari.prototype.getPe = function() {
  return /** @type{?proto.OpenedTiles} */ (
    jspb.Message.getWrapperField(this, proto.OpenedTiles, 10));
};


/**
 * @param {?proto.OpenedTiles|undefined} value
 * @return {!proto.Agari} returns this
*/
proto.Agari.prototype.setPe = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.clearPe = function() {
  return this.setPe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Agari.prototype.hasPe = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Point point = 11;
 * @return {?proto.Point}
 */
proto.Agari.prototype.getPoint = function() {
  return /** @type{?proto.Point} */ (
    jspb.Message.getWrapperField(this, proto.Point, 11));
};


/**
 * @param {?proto.Point|undefined} value
 * @return {!proto.Agari} returns this
*/
proto.Agari.prototype.setPoint = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Agari} returns this
 */
proto.Agari.prototype.clearPoint = function() {
  return this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Agari.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    agari: (f = msg.getAgari()) && proto.Agari.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MessageType} */ (reader.readEnum());
      msg.setMessagetype(value);
      break;
    case 2:
      var value = new proto.Agari;
      reader.readMessage(value,proto.Agari.deserializeBinaryFromReader);
      msg.setAgari(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAgari();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Agari.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageType messageType = 1;
 * @return {!proto.MessageType}
 */
proto.Message.prototype.getMessagetype = function() {
  return /** @type {!proto.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.MessageType} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setMessagetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Agari agari = 2;
 * @return {?proto.Agari}
 */
proto.Message.prototype.getAgari = function() {
  return /** @type{?proto.Agari} */ (
    jspb.Message.getWrapperField(this, proto.Agari, 2));
};


/**
 * @param {?proto.Agari|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setAgari = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearAgari = function() {
  return this.setAgari(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasAgari = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomname: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateRoomRequest}
 */
proto.CreateRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateRoomRequest;
  return proto.CreateRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateRoomRequest}
 */
proto.CreateRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string roomName = 1;
 * @return {string}
 */
proto.CreateRoomRequest.prototype.getRoomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CreateRoomRequest} returns this
 */
proto.CreateRoomRequest.prototype.setRoomname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Room.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Room.prototype.toObject = function(opt_includeInstance) {
  return proto.Room.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Room} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Room.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playernamesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Room}
 */
proto.Room.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Room;
  return proto.Room.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Room} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Room}
 */
proto.Room.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlayernames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Room.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Room.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Room} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Room.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayernamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.Room.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string roomName = 2;
 * @return {string}
 */
proto.Room.prototype.getRoomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setRoomname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string playerNames = 3;
 * @return {!Array<string>}
 */
proto.Room.prototype.getPlayernamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.setPlayernamesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.addPlayernames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Room} returns this
 */
proto.Room.prototype.clearPlayernamesList = function() {
  return this.setPlayernamesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Rooms.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Rooms.prototype.toObject = function(opt_includeInstance) {
  return proto.Rooms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Rooms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Rooms.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.Room.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Rooms}
 */
proto.Rooms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Rooms;
  return proto.Rooms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Rooms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Rooms}
 */
proto.Rooms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Room;
      reader.readMessage(value,proto.Room.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Rooms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Rooms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Rooms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Rooms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Room.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Room rooms = 1;
 * @return {!Array<!proto.Room>}
 */
proto.Rooms.prototype.getRoomsList = function() {
  return /** @type{!Array<!proto.Room>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Room, 1));
};


/**
 * @param {!Array<!proto.Room>} value
 * @return {!proto.Rooms} returns this
*/
proto.Rooms.prototype.setRoomsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Room=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Room}
 */
proto.Rooms.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Room, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Rooms} returns this
 */
proto.Rooms.prototype.clearRoomsList = function() {
  return this.setRoomsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JoinRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.JoinRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JoinRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roomid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JoinRoomRequest}
 */
proto.JoinRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JoinRoomRequest;
  return proto.JoinRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JoinRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JoinRoomRequest}
 */
proto.JoinRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JoinRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JoinRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JoinRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JoinRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string playerID = 1;
 * @return {string}
 */
proto.JoinRoomRequest.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.JoinRoomRequest} returns this
 */
proto.JoinRoomRequest.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string playerName = 2;
 * @return {string}
 */
proto.JoinRoomRequest.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.JoinRoomRequest} returns this
 */
proto.JoinRoomRequest.prototype.setPlayername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string roomID = 3;
 * @return {string}
 */
proto.JoinRoomRequest.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.JoinRoomRequest} returns this
 */
proto.JoinRoomRequest.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TableStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.TableStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TableStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TableStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    kaze: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TableStatus}
 */
proto.TableStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TableStatus;
  return proto.TableStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TableStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TableStatus}
 */
proto.TableStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Kaze} */ (reader.readEnum());
      msg.setKaze(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TableStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TableStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TableStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TableStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKaze();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Kaze kaze = 1;
 * @return {!proto.Kaze}
 */
proto.TableStatus.prototype.getKaze = function() {
  return /** @type {!proto.Kaze} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Kaze} value
 * @return {!proto.TableStatus} returns this
 */
proto.TableStatus.prototype.setKaze = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameTable.prototype.toObject = function(opt_includeInstance) {
  return proto.GameTable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameTable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameTable.toObject = function(includeInstance, msg) {
  var f, obj = {
    tsumo: (f = msg.getTsumo()) && proto.Tsumo.toObject(includeInstance, f),
    player1: (f = msg.getPlayer1()) && proto.Player.toObject(includeInstance, f),
    player2: (f = msg.getPlayer2()) && proto.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameTable}
 */
proto.GameTable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameTable;
  return proto.GameTable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameTable}
 */
proto.GameTable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Tsumo;
      reader.readMessage(value,proto.Tsumo.deserializeBinaryFromReader);
      msg.setTsumo(value);
      break;
    case 2:
      var value = new proto.Player;
      reader.readMessage(value,proto.Player.deserializeBinaryFromReader);
      msg.setPlayer1(value);
      break;
    case 3:
      var value = new proto.Player;
      reader.readMessage(value,proto.Player.deserializeBinaryFromReader);
      msg.setPlayer2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameTable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameTable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTsumo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Tsumo.serializeBinaryToWriter
    );
  }
  f = message.getPlayer1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Player.serializeBinaryToWriter
    );
  }
  f = message.getPlayer2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Tsumo tsumo = 1;
 * @return {?proto.Tsumo}
 */
proto.GameTable.prototype.getTsumo = function() {
  return /** @type{?proto.Tsumo} */ (
    jspb.Message.getWrapperField(this, proto.Tsumo, 1));
};


/**
 * @param {?proto.Tsumo|undefined} value
 * @return {!proto.GameTable} returns this
*/
proto.GameTable.prototype.setTsumo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameTable} returns this
 */
proto.GameTable.prototype.clearTsumo = function() {
  return this.setTsumo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameTable.prototype.hasTsumo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Player player1 = 2;
 * @return {?proto.Player}
 */
proto.GameTable.prototype.getPlayer1 = function() {
  return /** @type{?proto.Player} */ (
    jspb.Message.getWrapperField(this, proto.Player, 2));
};


/**
 * @param {?proto.Player|undefined} value
 * @return {!proto.GameTable} returns this
*/
proto.GameTable.prototype.setPlayer1 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameTable} returns this
 */
proto.GameTable.prototype.clearPlayer1 = function() {
  return this.setPlayer1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameTable.prototype.hasPlayer1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Player player2 = 3;
 * @return {?proto.Player}
 */
proto.GameTable.prototype.getPlayer2 = function() {
  return /** @type{?proto.Player} */ (
    jspb.Message.getWrapperField(this, proto.Player, 3));
};


/**
 * @param {?proto.Player|undefined} value
 * @return {!proto.GameTable} returns this
*/
proto.GameTable.prototype.setPlayer2 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameTable} returns this
 */
proto.GameTable.prototype.clearPlayer2 = function() {
  return this.setPlayer2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameTable.prototype.hasPlayer2 = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tsumo.prototype.toObject = function(opt_includeInstance) {
  return proto.Tsumo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tsumo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tsumo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tiles: (f = msg.getTiles()) && proto.Tiles.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tsumo}
 */
proto.Tsumo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tsumo;
  return proto.Tsumo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tsumo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tsumo}
 */
proto.Tsumo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Tiles;
      reader.readMessage(value,proto.Tiles.deserializeBinaryFromReader);
      msg.setTiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tsumo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tsumo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tsumo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tsumo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTiles();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Tiles.serializeBinaryToWriter
    );
  }
};


/**
 * optional Tiles tiles = 1;
 * @return {?proto.Tiles}
 */
proto.Tsumo.prototype.getTiles = function() {
  return /** @type{?proto.Tiles} */ (
    jspb.Message.getWrapperField(this, proto.Tiles, 1));
};


/**
 * @param {?proto.Tiles|undefined} value
 * @return {!proto.Tsumo} returns this
*/
proto.Tsumo.prototype.setTiles = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Tsumo} returns this
 */
proto.Tsumo.prototype.clearTiles = function() {
  return this.setTiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Tsumo.prototype.hasTiles = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Tiles.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tiles.prototype.toObject = function(opt_includeInstance) {
  return proto.Tiles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tiles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tiles.toObject = function(includeInstance, msg) {
  var f, obj = {
    tilesList: jspb.Message.toObjectList(msg.getTilesList(),
    proto.Tile.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tiles}
 */
proto.Tiles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tiles;
  return proto.Tiles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tiles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tiles}
 */
proto.Tiles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Tile;
      reader.readMessage(value,proto.Tile.deserializeBinaryFromReader);
      msg.addTiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tiles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tiles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tiles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tiles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Tile.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Tile tiles = 1;
 * @return {!Array<!proto.Tile>}
 */
proto.Tiles.prototype.getTilesList = function() {
  return /** @type{!Array<!proto.Tile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Tile, 1));
};


/**
 * @param {!Array<!proto.Tile>} value
 * @return {!proto.Tiles} returns this
*/
proto.Tiles.prototype.setTilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Tile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Tile}
 */
proto.Tiles.prototype.addTiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Tile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Tiles} returns this
 */
proto.Tiles.prototype.clearTilesList = function() {
  return this.setTilesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Tile.prototype.toObject = function(opt_includeInstance) {
  return proto.Tile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Tile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tile.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    num: jspb.Message.getFieldWithDefault(msg, 3, 0),
    suit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    dora: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    akadora: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Tile}
 */
proto.Tile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Tile;
  return proto.Tile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Tile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Tile}
 */
proto.Tile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNum(value);
      break;
    case 4:
      var value = /** @type {!proto.Suit} */ (reader.readEnum());
      msg.setSuit(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDora(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAkadora(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Tile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Tile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Tile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Tile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSuit();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDora();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getAkadora();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Tile.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tile} returns this
 */
proto.Tile.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Tile.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Tile} returns this
 */
proto.Tile.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 num = 3;
 * @return {number}
 */
proto.Tile.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Tile} returns this
 */
proto.Tile.prototype.setNum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Suit suit = 4;
 * @return {!proto.Suit}
 */
proto.Tile.prototype.getSuit = function() {
  return /** @type {!proto.Suit} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Suit} value
 * @return {!proto.Tile} returns this
 */
proto.Tile.prototype.setSuit = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool dora = 5;
 * @return {boolean}
 */
proto.Tile.prototype.getDora = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Tile} returns this
 */
proto.Tile.prototype.setDora = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool akadora = 6;
 * @return {boolean}
 */
proto.Tile.prototype.getAkadora = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Tile} returns this
 */
proto.Tile.prototype.setAkadora = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hand: (f = msg.getHand()) && proto.Tiles.toObject(includeInstance, f),
    tsumoritile: (f = msg.getTsumoritile()) && proto.Tile.toObject(includeInstance, f),
    openedtile1: (f = msg.getOpenedtile1()) && proto.OpenedTiles.toObject(includeInstance, f),
    openedtile2: (f = msg.getOpenedtile2()) && proto.OpenedTiles.toObject(includeInstance, f),
    openedtile3: (f = msg.getOpenedtile3()) && proto.OpenedTiles.toObject(includeInstance, f),
    openedtile4: (f = msg.getOpenedtile4()) && proto.OpenedTiles.toObject(includeInstance, f),
    pe: (f = msg.getPe()) && proto.OpenedTiles.toObject(includeInstance, f),
    kawa: (f = msg.getKawa()) && proto.Tiles.toObject(includeInstance, f),
    kaze: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Player}
 */
proto.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Player;
  return proto.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Player}
 */
proto.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.Tiles;
      reader.readMessage(value,proto.Tiles.deserializeBinaryFromReader);
      msg.setHand(value);
      break;
    case 4:
      var value = new proto.Tile;
      reader.readMessage(value,proto.Tile.deserializeBinaryFromReader);
      msg.setTsumoritile(value);
      break;
    case 5:
      var value = new proto.OpenedTiles;
      reader.readMessage(value,proto.OpenedTiles.deserializeBinaryFromReader);
      msg.setOpenedtile1(value);
      break;
    case 6:
      var value = new proto.OpenedTiles;
      reader.readMessage(value,proto.OpenedTiles.deserializeBinaryFromReader);
      msg.setOpenedtile2(value);
      break;
    case 7:
      var value = new proto.OpenedTiles;
      reader.readMessage(value,proto.OpenedTiles.deserializeBinaryFromReader);
      msg.setOpenedtile3(value);
      break;
    case 8:
      var value = new proto.OpenedTiles;
      reader.readMessage(value,proto.OpenedTiles.deserializeBinaryFromReader);
      msg.setOpenedtile4(value);
      break;
    case 9:
      var value = new proto.OpenedTiles;
      reader.readMessage(value,proto.OpenedTiles.deserializeBinaryFromReader);
      msg.setPe(value);
      break;
    case 10:
      var value = new proto.Tiles;
      reader.readMessage(value,proto.Tiles.deserializeBinaryFromReader);
      msg.setKawa(value);
      break;
    case 11:
      var value = /** @type {!proto.Kaze} */ (reader.readEnum());
      msg.setKaze(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Tiles.serializeBinaryToWriter
    );
  }
  f = message.getTsumoritile();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Tile.serializeBinaryToWriter
    );
  }
  f = message.getOpenedtile1();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.OpenedTiles.serializeBinaryToWriter
    );
  }
  f = message.getOpenedtile2();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.OpenedTiles.serializeBinaryToWriter
    );
  }
  f = message.getOpenedtile3();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.OpenedTiles.serializeBinaryToWriter
    );
  }
  f = message.getOpenedtile4();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.OpenedTiles.serializeBinaryToWriter
    );
  }
  f = message.getPe();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.OpenedTiles.serializeBinaryToWriter
    );
  }
  f = message.getKawa();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Tiles.serializeBinaryToWriter
    );
  }
  f = message.getKaze();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Player.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Tiles hand = 3;
 * @return {?proto.Tiles}
 */
proto.Player.prototype.getHand = function() {
  return /** @type{?proto.Tiles} */ (
    jspb.Message.getWrapperField(this, proto.Tiles, 3));
};


/**
 * @param {?proto.Tiles|undefined} value
 * @return {!proto.Player} returns this
*/
proto.Player.prototype.setHand = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.clearHand = function() {
  return this.setHand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Player.prototype.hasHand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Tile tsumoriTile = 4;
 * @return {?proto.Tile}
 */
proto.Player.prototype.getTsumoritile = function() {
  return /** @type{?proto.Tile} */ (
    jspb.Message.getWrapperField(this, proto.Tile, 4));
};


/**
 * @param {?proto.Tile|undefined} value
 * @return {!proto.Player} returns this
*/
proto.Player.prototype.setTsumoritile = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.clearTsumoritile = function() {
  return this.setTsumoritile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Player.prototype.hasTsumoritile = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OpenedTiles openedTile1 = 5;
 * @return {?proto.OpenedTiles}
 */
proto.Player.prototype.getOpenedtile1 = function() {
  return /** @type{?proto.OpenedTiles} */ (
    jspb.Message.getWrapperField(this, proto.OpenedTiles, 5));
};


/**
 * @param {?proto.OpenedTiles|undefined} value
 * @return {!proto.Player} returns this
*/
proto.Player.prototype.setOpenedtile1 = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.clearOpenedtile1 = function() {
  return this.setOpenedtile1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Player.prototype.hasOpenedtile1 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OpenedTiles openedTile2 = 6;
 * @return {?proto.OpenedTiles}
 */
proto.Player.prototype.getOpenedtile2 = function() {
  return /** @type{?proto.OpenedTiles} */ (
    jspb.Message.getWrapperField(this, proto.OpenedTiles, 6));
};


/**
 * @param {?proto.OpenedTiles|undefined} value
 * @return {!proto.Player} returns this
*/
proto.Player.prototype.setOpenedtile2 = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.clearOpenedtile2 = function() {
  return this.setOpenedtile2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Player.prototype.hasOpenedtile2 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OpenedTiles openedTile3 = 7;
 * @return {?proto.OpenedTiles}
 */
proto.Player.prototype.getOpenedtile3 = function() {
  return /** @type{?proto.OpenedTiles} */ (
    jspb.Message.getWrapperField(this, proto.OpenedTiles, 7));
};


/**
 * @param {?proto.OpenedTiles|undefined} value
 * @return {!proto.Player} returns this
*/
proto.Player.prototype.setOpenedtile3 = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.clearOpenedtile3 = function() {
  return this.setOpenedtile3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Player.prototype.hasOpenedtile3 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OpenedTiles openedTile4 = 8;
 * @return {?proto.OpenedTiles}
 */
proto.Player.prototype.getOpenedtile4 = function() {
  return /** @type{?proto.OpenedTiles} */ (
    jspb.Message.getWrapperField(this, proto.OpenedTiles, 8));
};


/**
 * @param {?proto.OpenedTiles|undefined} value
 * @return {!proto.Player} returns this
*/
proto.Player.prototype.setOpenedtile4 = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.clearOpenedtile4 = function() {
  return this.setOpenedtile4(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Player.prototype.hasOpenedtile4 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OpenedTiles pe = 9;
 * @return {?proto.OpenedTiles}
 */
proto.Player.prototype.getPe = function() {
  return /** @type{?proto.OpenedTiles} */ (
    jspb.Message.getWrapperField(this, proto.OpenedTiles, 9));
};


/**
 * @param {?proto.OpenedTiles|undefined} value
 * @return {!proto.Player} returns this
*/
proto.Player.prototype.setPe = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.clearPe = function() {
  return this.setPe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Player.prototype.hasPe = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Tiles kawa = 10;
 * @return {?proto.Tiles}
 */
proto.Player.prototype.getKawa = function() {
  return /** @type{?proto.Tiles} */ (
    jspb.Message.getWrapperField(this, proto.Tiles, 10));
};


/**
 * @param {?proto.Tiles|undefined} value
 * @return {!proto.Player} returns this
*/
proto.Player.prototype.setKawa = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.clearKawa = function() {
  return this.setKawa(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Player.prototype.hasKawa = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Kaze kaze = 11;
 * @return {!proto.Kaze}
 */
proto.Player.prototype.getKaze = function() {
  return /** @type {!proto.Kaze} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.Kaze} value
 * @return {!proto.Player} returns this
 */
proto.Player.prototype.setKaze = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OpenedTiles.prototype.toObject = function(opt_includeInstance) {
  return proto.OpenedTiles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OpenedTiles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OpenedTiles.toObject = function(includeInstance, msg) {
  var f, obj = {
    opentype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tiles: (f = msg.getTiles()) && proto.Tiles.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OpenedTiles}
 */
proto.OpenedTiles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OpenedTiles;
  return proto.OpenedTiles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OpenedTiles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OpenedTiles}
 */
proto.OpenedTiles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.OpenType} */ (reader.readEnum());
      msg.setOpentype(value);
      break;
    case 2:
      var value = new proto.Tiles;
      reader.readMessage(value,proto.Tiles.deserializeBinaryFromReader);
      msg.setTiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OpenedTiles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OpenedTiles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OpenedTiles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OpenedTiles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpentype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTiles();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Tiles.serializeBinaryToWriter
    );
  }
};


/**
 * optional OpenType openType = 1;
 * @return {!proto.OpenType}
 */
proto.OpenedTiles.prototype.getOpentype = function() {
  return /** @type {!proto.OpenType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.OpenType} value
 * @return {!proto.OpenedTiles} returns this
 */
proto.OpenedTiles.prototype.setOpentype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Tiles tiles = 2;
 * @return {?proto.Tiles}
 */
proto.OpenedTiles.prototype.getTiles = function() {
  return /** @type{?proto.Tiles} */ (
    jspb.Message.getWrapperField(this, proto.Tiles, 2));
};


/**
 * @param {?proto.Tiles|undefined} value
 * @return {!proto.OpenedTiles} returns this
*/
proto.OpenedTiles.prototype.setTiles = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OpenedTiles} returns this
 */
proto.OpenedTiles.prototype.clearTiles = function() {
  return this.setTiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OpenedTiles.prototype.hasTiles = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerID.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerID.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerID}
 */
proto.PlayerID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerID;
  return proto.PlayerID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerID}
 */
proto.PlayerID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string playerid = 1;
 * @return {string}
 */
proto.PlayerID.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerID} returns this
 */
proto.PlayerID.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Operators.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Operators.prototype.toObject = function(opt_includeInstance) {
  return proto.Operators.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Operators} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Operators.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorsList: jspb.Message.toObjectList(msg.getOperatorsList(),
    proto.Operator.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Operators}
 */
proto.Operators.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Operators;
  return proto.Operators.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Operators} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Operators}
 */
proto.Operators.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.Operator;
      reader.readMessage(value,proto.Operator.deserializeBinaryFromReader);
      msg.addOperators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Operators.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Operators.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Operators} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Operators.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Operator.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Operator operators = 2;
 * @return {!Array<!proto.Operator>}
 */
proto.Operators.prototype.getOperatorsList = function() {
  return /** @type{!Array<!proto.Operator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Operator, 2));
};


/**
 * @param {!Array<!proto.Operator>} value
 * @return {!proto.Operators} returns this
*/
proto.Operators.prototype.setOperatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Operator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Operator}
 */
proto.Operators.prototype.addOperators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Operator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Operators} returns this
 */
proto.Operators.prototype.clearOperatorsList = function() {
  return this.setOperatorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Operator.prototype.toObject = function(opt_includeInstance) {
  return proto.Operator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Operator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Operator.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    operatortype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    targettiles: (f = msg.getTargettiles()) && proto.Tiles.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Operator}
 */
proto.Operator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Operator;
  return proto.Operator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Operator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Operator}
 */
proto.Operator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 3:
      var value = /** @type {!proto.OperatorType} */ (reader.readEnum());
      msg.setOperatortype(value);
      break;
    case 4:
      var value = new proto.Tiles;
      reader.readMessage(value,proto.Tiles.deserializeBinaryFromReader);
      msg.setTargettiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Operator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Operator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Operator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Operator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOperatortype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTargettiles();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Tiles.serializeBinaryToWriter
    );
  }
};


/**
 * optional string roomID = 1;
 * @return {string}
 */
proto.Operator.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Operator} returns this
 */
proto.Operator.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string playerID = 2;
 * @return {string}
 */
proto.Operator.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Operator} returns this
 */
proto.Operator.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional OperatorType operatorType = 3;
 * @return {!proto.OperatorType}
 */
proto.Operator.prototype.getOperatortype = function() {
  return /** @type {!proto.OperatorType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.OperatorType} value
 * @return {!proto.Operator} returns this
 */
proto.Operator.prototype.setOperatortype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Tiles targetTiles = 4;
 * @return {?proto.Tiles}
 */
proto.Operator.prototype.getTargettiles = function() {
  return /** @type{?proto.Tiles} */ (
    jspb.Message.getWrapperField(this, proto.Tiles, 4));
};


/**
 * @param {?proto.Tiles|undefined} value
 * @return {!proto.Operator} returns this
*/
proto.Operator.prototype.setTargettiles = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Operator} returns this
 */
proto.Operator.prototype.clearTargettiles = function() {
  return this.setTargettiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Operator.prototype.hasTargettiles = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.MessageType = {
  MESSAGEAGARI: 0,
  MESSAGEKYUSHUKYUHAI: 1,
  MESSAGESUKAIKAN: 2,
  MESSAGERYUKYOKU: 3
};

/**
 * @enum {number}
 */
proto.Suit = {
  NONE: 0,
  MANZU: 1,
  SOZU: 2,
  PINZU: 3,
  TON: 4,
  NAN: 5,
  SHA: 6,
  PE: 7,
  HAKU: 8,
  HATSU: 9,
  CHUN: 10
};

/**
 * @enum {number}
 */
proto.Kaze = {
  KAZE_TON: 0,
  KAZE_NAN: 2,
  KAZE_SHA: 3,
  KAZE_PE: 4
};

/**
 * @enum {number}
 */
proto.OpenType = {
  OPEN_NULL: 0,
  OPEN_PON: 1,
  OPEN_CHI: 2,
  OPEN_ANKAN: 3,
  OPEN_DAIMINKAN: 4,
  OPEN_KAKAN: 5,
  OPEN_PE: 6
};

/**
 * @enum {number}
 */
proto.OperatorType = {
  OPERATOR_START_GAME: 0,
  OPERATOR_SKIP: 1,
  OPERATOR_DRAW: 2,
  OPERATOR_DAHAI: 3,
  OPERATOR_RON: 4,
  OPERATOR_PON: 5,
  OPERATOR_CHI: 6,
  OPERATOR_DAIMINKAN: 7,
  OPERATOR_TSUMO: 8,
  OPERATOR_ANKAN: 9,
  OPERATOR_KAKAN: 10,
  OPERATOR_PE: 11,
  OPERATOR_KYUSHUKYUHAI: 12,
  OPERATOR_REACH: 13,
  OPERATOR_OK: 14
};

goog.object.extend(exports, proto);
